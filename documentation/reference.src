/**
\page cross_reference Builder API Cross Reference

\section initialisation IOC builder Initialisation

The first few lines in a Python IOC builder script might look like this:

\code
from pkg_resources import require
require('iocbuilder')

import iocbuilder
iocbuilder.ConfigureIOC()

from iocbuilder import *
LoadVersionFile('versions.py')
\endcode

One of the following initialisation functions should be called:

- \ref iocbuilder.configure.ConfigureIOC "ConfigureIOC()" <br>
This is the normal IOC initialisation function.  The default architecture is
vxWorks.
- \ref iocbuilder.configure.ConfigureTemplate "ConfigureTemplate()" <br>
This initialisation is appropriate the builder is being used to generate a
template.
- \ref iocbuilder.configure.ParseEtcArgs "ParseEtcArgs()" <br>
This initialisation picks up version information from \c configure/RELEASE and
related files.
- \ref iocbuilder.configure.Configure "Configure(...)"  <br> 
All the other calls above delegate to this more general purpose call.

After the builder has been configured the required support modules should be
loaded using the following calls:

- \ref iocbuilder.libversion.ModuleVersion "ModuleVersion()" <br>
Calls to this function can be made inline for each support module.
- \ref iocbuilder.configure.LoadVersionFile "LoadVersionFile()" <br>
This is useful for packaging module definitions separately.



*/
