'''
from iocbuilder import records, RecordFactory, EdmScreen, ModuleBase, IocDataStream
from iocbuilder.validators import boolean, strOrNone
import sys, os
from math import sqrt
sys.path.append("/dls_sw/work/common/python/test/packages/dls_edm-0.0-py2.4.egg")        
from dls_edm import Generic, Titlebar, EdmObject, Substitute_embed, quoteString, EdmTable, Flip_horizontal
from dls_edm.common import embed, rd_visible, label, colour_changing_rd
       
def edlFile(x):
    return x.replace(".edl","")+".edl"        
          
def hasGuiInfo(ob):    
    attrs = [ "StatusPv", "SevrPv", "EdmEmbedded", "EdmScreen" ]
    hasGuiAttr = max([ hasattr(ob,attr) for attr in attrs ])    
    assert hasGuiAttr, "Objects needs one of %s"%attrs
    return ob


class GuiComponent(EdmScreen):
    
    MaxObs = 50
    ArgInfo = [ 
        ('P', str, "Device prefix for summary PV"),
#        ('NAME', str, "Shortname for display"),        
        ('DESCRIPTION', str, "Tooltip description for component"),
        ('FILE', strOrNone, "File for related display to launch, if not "\
            "specified this defaults to the autogenerated filename", None),
        ('EDM_MACROS', str, "To use when calling the screen", "")] + [
        ('object%i'%i, hasGuiInfo, "Object %i"%i, None) 
            for i in range(1,MaxObs+1)] + [
        ('status', boolean, "If True then try to create a status PV for the "\
            "component that sums status and severity from objects", True),
        ('autogen', boolean, "If True then try to create an autogen "\
            "screen from the objects provided", True),
        ('embedded', boolean, "If True then prefer writing autogen screens with"\
            " EdmEmbedded objects, otherwise write buttons connected to "\
            "EdmScreen", True),
        ('aspectScale', float, "Specify a different aspect ratio scale, "\
            "typically values range between 1-10", None),
    ]            
    StatusPv = "%(P)s:DEVSTA" # get status from this pv.VAL
    SevrPv = "%(P)s:DEVSTA" # get severity from this pv.SEVR
    XMLObjects = [ 'object%i'%i for i in range(1,MaxObs+1) ]
    IdenticalSim = True    
    
    def __init__(self,**args):
        # list of objects to make gui components out of                    
        self.obs = [ args[x] for x in self.XMLObjects if args[x] is not None ] 
        autogen = "%(P)s-device-screen-0.edl"
        if args["FILE"] == None:
            args["FILE"] = autogen%args
        if args["autogen"]:
            # Register an edm screen to be generated
            self.EdmScreen = (autogen,"","PrintAutogenScreen")            
        if args["status"]:
            # now make the calc records
            stats = [o.StatusPv%o.ArgValues for o in self.obs if hasattr(o,"StatusPv")]
            sevrs = [o.SevrPv%o.ArgValues for o in self.obs if hasattr(o,"SevrPv")]
            # inps = (pv,inCalc)
            inps  = [(pv+" CP NMS",True) for pv in stats if pv not in sevrs ]
            inps += [(pv+" CP MS",True) for pv in stats if pv in sevrs ]
            inps += [(pv+" CP MS",False) for pv in sevrs if pv not in stats ]
            ncalcs = max((len(inps)+11)/12,1)       
            for i in range(ncalcs):
                subset = inps[12*i:12*i+12]
                letters = [chr(65+j) for j,(pv,inCalc) in enumerate(subset) if inCalc]
                if letters:                
                    CALC = "(%s)>0?1:0"%("|".join(letters))
                else:
                    CALC = "0"
                cargs = dict(("INP%s"%(chr(65+j)),pv) for j,(pv,inCalc) in enumerate(subset))
                recordName = self.StatusPv%args                     
                if ncalcs>1:
                    cargs["FLNK"] = recordName            
                    recordName += str(i+1)
                elif not inps:
                    # no input args, so will always be 0, make it pini
                    cargs["PINI"] = "YES"
                records.calc(recordName,CALC=CALC,**cargs)
            if ncalcs>1:
                recordName = self.StatusPv%args                             
                letters = [chr(65+j) for j in range(ncalcs)]      
                CALC = "(%s)>0?1:0"%("|".join(letters))  
                cargs = dict(("INP%s"%l,"%s%s"%(recordName,j+1)) for j,l in enumerate(letters))            
                records.calc(recordName,CALC=CALC,**cargs)
#        records.stringin("%(P)s:NAME"%args,VAL=args["NAME"],DESC=args["DESCRIPTION"])
        # now init
        self.__super.__init__(**args)

    def PrintAutogenScreen(self):        
        screenobs = []
        for ob in self.obs:
            if hasattr(ob,"ScreenPath"):
                # this is a screen
                screenobs.append(get_screen_ob(ob,self.ArgValues["embedded"],strip=getattr(self,"__name__","")+"."))
        if screenobs:
            screen = Generic(screenobs,auto_x_y_string=self.ArgValues["P"],
                ideal_a_r=self.ArgValues["aspectScale"])
        else:
            screen = EdmObject("Screen")
            screen.addObject(label(0,0,100,20,"Empty Screen"))                        
        screen = Titlebar(screen, button_text = self.__name__,
            header_text = self.ArgValues["DESCRIPTION"],
            title = "Device - %(P)s"%self.ArgValues)
        Substitute_embed(screen,[],{},ungroup=True)
        print screen.read()                                                

def get_screen_ob(ob,embedded=False,filename=None,strip=""):
    label = getattr(ob,"__name__","")
    if label.startswith(strip):
        label = label[len(strip):]
    if embedded and getattr(ob,"EdmEmbedded",(None,None))[0] is not None:            
        if filename is None:
            filename, macros = ob.getEdmScreen(embedded=True)
            path = os.path.join(ob.ScreenPath,filename)            
        else:
            _, macros = ob.getEdmScreen(embedded=True)
            path = os.path.join(GuiComponent.getScreenPath(),filename)
        macros += ",label=%s"%label
        if filename not in Substitute_embed.in_screens:
            screen = EdmObject("Screen")
            screen.write(open(path,"r").read())
            Substitute_embed.in_screens[filename] = screen
        eob = embed(0,0,0,0,filename,macros)
        eob.setDimensions(*Substitute_embed.in_screens[filename].getDimensions())
    else:
        d = {}
        d["filename"], d["symbols"] = ob.getEdmScreen()
        group = EdmObject("Group")        
        zero = r"LOC\dummy0=i:0"                
        for attr in ["StatusPv","SevrPv"]:
            d[attr] = getattr(ob,attr,zero)%ob.ArgValues
        eob = colour_changing_rd(0,0,90,20,name=label,edl=d["filename"].endswith(".edl"),**d)    
    return eob

class EdmStartupScript(ModuleBase):
    ArgInfo = [ 
        ('Filename', str, "Filename of script"),
        ('Screen', str, "EDM synoptic to run"),        
        ('SetPath', boolean, "Set PATH to be $EDMDATAFILES:$PATH", True),
        ('SetPort', boolean, "Popup a gui requesting port if it isn't set", True),       
        ('Macros', str, "Macro string to pass to edm","") 
    ]
    Header = """#!/bin/sh
# first load the paths
if [ "$1" = "-d" ]; then
    . $(dirname $0)/EDMDATAFILES.sh -d
    OPTS="-x -eolc"
else
    . $(dirname $0)/EDMDATAFILES.sh
    OPTS="-x -eolc -noedit"
fi
"""
    SetPath = """
# Set the path to include any scripts in data dirs
export PATH=${EDMDATAFILES}:${PATH}
"""    
    SetPort = r"""
if [ "$EPICS_CA_SERVER_PORT" = "" ]
then
    xmessage -nearmouse -buttons '5064 - Machine Mode,'\
'6064 - Prod Simulation,6164 - Work Simulation,6764 - Local Simulation' \
'Which port would you like to run the edm display on?'\
'                                      '
    case $? in
    101) export EPICS_CA_SERVER_PORT=5064
         export EPICS_CA_REPEATER_PORT=5065 ;;
    102) export EPICS_CA_SERVER_PORT=6064
         export EPICS_CA_REPEATER_PORT=6065 ;;
    103) export EPICS_CA_SERVER_PORT=6164
         export EPICS_CA_REPEATER_PORT=6165 ;;
    104) export EPICS_CA_SERVER_PORT=6764
         export EPICS_CA_REPEATER_PORT=6765 ;;
    esac    
fi
"""    
    def __init__(self,**args):
        script = IocDataStream(args["Filename"],"opi/edl",ex=True)
        script.write(self.Header)
        for arg in ["SetPath","SetPort"]:
            if args[arg]:
                script.write(getattr(self,arg))
        script.write('/dls_sw/work/epics/R3.14.8.2/extensions/bin/linux-x86/edm ${OPTS} -m "%(Macros)s" %(Screen)s'%args)
        
class BLScripts(ModuleBase):
    "The normal BL scripts"
    ArgInfo = [ 
        ('dom', str, "Domain"),
    ]
    alh = """#!/bin/sh
alh -D -S $(dirname $0)/../../../../zdata/%(dom)s.alhConfig
"""
    alhserver = """#!/bin/sh
if [ ! -d %(alhLogPath)s ]; then
    mkdir -m 775 -p %(alhLogPath)s
fi
/dls_sw/epics/R3.14.8.2/extensions/bin/linux-x86/alh -m 0 -T -a %(alhLogPath)s/%(dom)s-alarm-log.alhAlarm -o %(alhLogPath)s/%(dom)s-alarm-log.alhOpmod $(dirname $0)/../../../../zdata/%(dom)s.alhConfig &
"""
    fe = "/home/diamond/R3.13.9/prod/support/Launcher/Rx-y/FrontEnd_QT.sh %(FEdom)s"
    burt = "if [ -d $1 ]; then cd $1; fi; burtgooey"

    def __init__(self,**args):    
        dom = args["dom"]
        args["FEdom"] = dom.replace("BL","FE")
        args["alhLogPath"] = "/dls/"+dom[4].lower()+dom[2:4]+"/epics/alh"
        for name in ["alh","alhserver","fe","burt"]:
            script = IocDataStream("st%(dom)s-%(name)s"%locals(),"opi/edl",ex=True)
            script.write(getattr(self,name)%args)
        script_dir = os.path.join(self.LibPath(),"BLGuiApp","src")
        for x in [ x for x in os.listdir(script_dir) if \
            x.startswith("stBLxxI") and not x.endswith("~") ]:
            script = IocDataStream(x.replace("stBLxxI","st"+dom),"opi/edl",ex=True)
            script.write(open(os.path.join(script_dir,x)).read())  

def get_instances(cls):
    return [ v for v in ModuleBase._Instances if v.__class__ == cls ]

class SummaryScreen(EdmScreen):
    "Inherit from this to put an autofilled screen in your directory"
    
    ArgInfo = [ 
        ('Domain', str, "BL domain (like BL11I)"),
        ('Object', None, "Inlude all objects with the same class as Object"),
        ('Title', str, "Title, like 'Motor Homing'"),        
        ('Group', boolean, "If True then group by GuiComponent", True),
        ('embedded', boolean, "If True then prefer writing autogen screens with"\
            " EdmEmbedded objects, otherwise write buttons connected to "\
            "EdmScreen", False),
        ('alternateEmbed', strOrNone, "Use this instead of the embedded screen "\
            "specified by object Object", None),
        ('aspectRatio', float, "Specify a different aspect ratio scale, "\
            "typically values range between 1-2", 1.5),
    ]         
    XMLObjects = ['Object']   
    
    EdmScreen = ("%(Domain)s-%(SafeTitle)s-summary.edl","","MakeScreen")
    
    def __init__(self,**args):
        args["SafeTitle"] = args["Title"].lower().replace(" ","-")
        self.__super.__init__(**args)
        
    def MakeScreen(self):
        cls = self.ArgValues["Object"].__class__    
        embedded = self.ArgValues["embedded"]
        filename = self.ArgValues["alternateEmbed"]
        screen = EdmObject("Screen")
        table = EdmTable(yborder=5)
        screen.addObject(table)
        headerText = "%s Summary"%self.ArgValues["Title"]        
        if self.ArgValues["Group"]:
            # group by components
            objects = []
            components = get_instances(GuiComponent)
            for c in components:
                bobs = [ get_screen_ob(v, embedded, filename) \
                    for k,v in c.ArgValues.items() \
                    if k.startswith("object") \
                    and v is not None and v.__class__ == cls ]
                if bobs:
                    # if this component has objects on this screen
                    # add a link to it's screen
                    cob = get_screen_ob(c,strip=getattr(c,"__name__","")+".")
                    cob.Objects[-1]["fgColor"] = cob.Colour["Black"]
                    w,h = cob.getDimensions()
                    cob.setDimensions(bobs[-1]["w"],h)
                    objects.append([cob]+bobs)
        else:
            # no grouping
            objects = [[get_screen_ob(v, embedded, filename)]  \
                for v in get_instances(cls) ]           
        if objects:                
            w,h = objects[0][-1].getDimensions()          
            numobs = sum([len(o) for o in objects])
            nrows = int(sqrt(numobs*w/(self.ArgValues["aspectRatio"]*h))+1)                                    
            for oblist in objects:
                # if the entire component doesn't fit in the column, create a new one
                if len(oblist) + table["__def_y"] > nrows:
                    table.nextCol()
                for ob in oblist:
                    table.addObject(ob)
                    table.nextCell(max_y=nrows)
            screen.autofitDimensions()
            table.ungroup()
            Titlebar(screen, button = "text", 
                     button_text = self.ArgValues["Domain"], header = "text", 
                     header_text = headerText, tooltip = "generic-tooltip",
                     title = headerText)
            Substitute_embed(screen,[],{})                 
            print screen.read()

class OverviewScreen(EdmScreen):
    "Inherit from this to put an autofilled screen in your directory"
    
    ArgInfo = [ 
        ('Screen', str, "EDM screen name"),
        ('Flip', boolean, "If True then create a flipped screen", True),
    ]
    
    EdmScreen = ("%(NewScreen)s.edl","","AutofillScreen")

    def __init__(self,**args):
        args["NewScreen"] = args["Screen"].replace("-src","").replace(".edl","")    
        self.screen = EdmObject("Screen")        
        self.__super.__init__(**args)
        if args["Flip"]:      
            f = _FlippedScreen(Screen=args["NewScreen"]+"-flipped",ob=self.screen)        

    def AutofillScreen(self):                        
        path = os.path.join(self.LibPath(),"data",self.ArgValues["Screen"])
        self.screen.write(open(path,"r").read())
        builders = dict((o.__name__,o) for o in ModuleBase._Instances if hasattr(o,"__name__"))
        groups = [ ob for ob in self.screen.Objects if ob.Type=="Group" ]
        for group in groups:
            # the vis PV is checked for tags
            if group.has_key("visPv"):
                visPv = group["visPv"].strip('"')
            else:
                visPv=""
            if visPv.startswith('#<'):
                # we need to do something with the group
                args = visPv.replace("#<","").split(">#")[:-1]
                assignment_args = [ a for a in args if "=" in a ]
                device_args = [ a for a in args if not "=" in a ]
                problems = device_args[:]
                for arg in assignment_args:
                    # if there is an = in the tag, split it into a list and
                    # replace tags from this list instead
                    group.substitute("#<"+arg.split("=")[0].strip()+">#",\
                                        arg.split("=")[1].strip())
                for device_name in [d for d in device_args if builders.has_key(d)]:
                    if device_name in problems:
                        problems.remove(device_name)
                    ob = builders[device_name]
                    d = ob.ArgValues.copy()
                    d["NAME"] = device_name
                    if "FILE" not in d and \
                        getattr(ob,"EdmScreen",(None,None))[0] is not None:
                        a = ob.EdmScreen
                        d["FILE"],d["EDM_MACROS"] = a[0]%d, a[1]%d
                    for key,val in d.items():
                        val = str(getattr(val,"__name__",val))
                        group.substitute("#<"+key+">#",val)
                # remove tags and write the group back
                for a in assignment_args+[a for a in device_args \
                                            if not a in problems]:
                    visPv = visPv.replace("#<"+a+">#","")
                group["visPv"] = quoteString(visPv)
                for problem in problems:
                    if problem not in ["AXIS_LEFT","AXIS_RIGHT"]:
                        print >> sys.stderr, "***Warning: Cannot find device "+\
                        problem+" in XML. Group has not been autofilled."
        print self.screen.read()            

class _FlippedScreen(EdmScreen):
    EdmScreen = ("%(Screen)s.edl","","FlipScreen")    

    def __init__(self,**args):
        self.ArgValues = args
        self.__super.__init__(**args)

    def FlipScreen(self):
        screen = self.ArgValues["ob"].copy()
        Flip_horizontal(screen,[os.path.join(self.LibPath(),"data")])
        print screen.read()
        
class DummySevrPv(ModuleBase):
    ArgInfo = [ 
        ('SevrPv', str, "Severity PV (uses the .SEVR field for severity)"),
        ('StatusPv', str, "Status PV (1=busy, 0=EDM screen name", None),        
    ]   
    IdenticalSim = True  
    def __init__(self, **args):
        for k,v in args.items():
            if v is not None:
                self.__dict__[k] = v
        self.__super.__init__()
'''
