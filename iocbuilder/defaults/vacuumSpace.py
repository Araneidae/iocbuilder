from iocbuilder import Substitution


class spaceTemplate(Substitution):
    Arguments = ('device', 'ionp', 'gauge', 'img', 'pirg', 'valve')
    TemplateFile = 'space.template'
    IdenticalSim = True

def concat(ll):
    return [x for l in ll for x in l]


class space(spaceTemplate):
    # this is the number we give to our autogenerated group objects
    spacei = 99

    ArgInfo = [
        ('device', str, 'Device Prefix'),
        ('gauge1', None, 'Gauge object 1'),
        ('pirg1', None, 'PIRG object 1'),
        ('img1', None, 'IMG object 1', None),            
        ('ionp1', None, 'Ion pump object 1', None),
        ('valve1', None, 'Valve object 1', None)] + \
        concat([
            [('gauge%d' % i, None, 'Gauge object %d' % i, None),
             ('pirg%d' % i, None, 'PIRG object %d' % i, None),
             ('img%d' % i, None, 'IMG object %d' % i, None),
             ('ionp%d' % i, None, 'Ion pump object %d' % i, None),
             ('valve%d' % i, None, 'Valve object %d' % i, None)]
            for i in range(2,5)])
    XMLObjects = [x[0] for x in ArgInfo[1:]]            
    Arguments = ('device', 'ionp', 'gauge', 'img', 'pirg', 'valve')

    def __init__(self, device, **kwargs):
        from iocbuilder.modules.digitelMpc import \
            digitelMpcIonpGroupTemplate, dummyIonpTemplate
        from iocbuilder.modules.mks937a import \
            mks937aGaugeGroupTemplate, mks937aImgGroupTemplate, \
            mks937aPirgGroupTemplate,  mks937aImgDummyTemplate
        from iocbuilder.modules.vacuumValve import \
            vacuumValveGroupTemplate, dummyValveTemplate

        # these are the different types of component we deal with
        components = (
            ('ionp',  digitelMpcIonpGroupTemplate, dummyIonpTemplate),
            ('gauge', mks937aGaugeGroupTemplate,   None),
            ('img',   mks937aImgGroupTemplate,     mks937aImgDummyTemplate),
            ('pirg',  mks937aPirgGroupTemplate,    None),
            ('valve', vacuumValveGroupTemplate,    dummyValveTemplate))
        # this is what we'll pass to the spaceTemplate init
        argdict = dict(device=device)

        for component, group, dummy in components:
            l = [kwargs['%s%i'%(component, j)] for j in range(1,5)]
            # l is the non-None objects of type x
            l = [ob for ob in l if ob is not None]
            p = '%s-VA-%s-%02i' % (
                device.split('-')[0], component.upper(), self.spacei)
            if len(l)==0:
                # need to make dummy objects
                assert dummy != None, \
                    '%s: Vacuum space defined with missing %s' % (
                        device, component)
                ob = dummy(device=p)
                argdict[component] = p
            elif len(l)==1:
                # only one object exists
                o = l[0]
                if component == 'gauge':
                    val = '%s-VA-GAUGE-%s'%(o.args['dom'],o.args['id'])
                else:
                    val = o.args['device']
                argdict[component] = val
            else:
                # many objects exist, so make a group for them
                d = dict(device=p)
                if component == 'ionp':
                    d['delay'] = 4
                elif component == 'valve':
                    d['delay'] = 1
                # repeat the first argument multiple times
                l += [l[0]]*(8-len(l))
                for j,o in enumerate(l):
                    if component == 'gauge':
                        val = '%s-VA-GAUGE-%s'%(o.args['dom'],o.args['id'])
                    else:
                        val = o.args['device']
                    d['%s%i' % (component, j+1)]=val
                ob = group(**d)
                argdict[component] = p            
        self.spacei -= 1
        spaceTemplate.__init__(self,**argdict)
