Overview of epics module structure

__init__.py
    Master epics module exports, together with overview help text.
Automatically imports all sub-modules, republishing their symbols as epics
module symbols.  Also sets up the default configuration.

autosave.py
    Implementation of PV autosave and restore functionality.  Relies on some
hooks in records and ioc writing.

bits.py
    Hacks for extending mbbiDirect and mbboDirect classes with bit and
register support.

configure.py
    Top level module configuration.  Coordinates epics module configuration
together with state reset when either starting a new configuration or a new
IOC.

dbd.py
    Interface to list of all record types: defines RecordTypes, aliased as
"records" which contains constructors for all the currently supported record
types.  Also provides support for loading new DBD files.
    
fanout.py
    Routines for building fanout and dfanout records from a list of records.

iocinit.py
    Ioc initialisation: supports IOC configuration settings together with
coordination of the calls required to build a single IOC initialisation file.

iocwriter.py
    Support for writing out an entire IOC.  Supports two types of IOC: simple
files, and entire directory structures.  The latter is very dependent on the
Diamond IOC structuring conventions.

libversion.py
    Base support for modules and module versioning.  

mydbstatic.py
    Uses ctypes to create direct interface to libdbStaticHost.so library: this
is part of EPICS and provides the API for reading and interpreting DBD files.

recordbase.py
    Record class support: all record types provided by the RecordTypes class
are subclassed from Record defined here.  Also defines types for links to
records, imported records, and template parameters.

recordnames.py
    Provides support for different record naming conventions.

recordset.py
    Collects together records as they are created and provides hooks for
writing them out as part of IOC creation.  Also supports templates and their
instances.

support.py
    A collection of sometimes fairly tricky support routines and base classes,
including module export support, a few helpful iteration routines, and some
tricks based on metaclasses: Singleton, autosuper, and auto-registering
classes.

versions_3_13.py
    Module version definitions for epics 3.13.

versions_3_14.py
    Module version definitions for epics 3.14.


